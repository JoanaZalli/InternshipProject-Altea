// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LoanStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LoanStatusId")
                        .IsUnique()
                        .HasFilter("[LoanStatusId] IS NOT NULL");

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4355),
                            Name = "In Charge",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4357)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4359),
                            LoanStatusId = 1,
                            Name = "Loan Issued",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4361)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4363),
                            LoanStatusId = 10,
                            Name = "Loan Canceled",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4364)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4366),
                            LoanStatusId = 7,
                            Name = "Loan Defaulted",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4368)
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4370),
                            LoanStatusId = 4,
                            Name = "Loan Disbursed",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4371)
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4373),
                            LoanStatusId = 9,
                            Name = "Loan Guaranteed",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4375)
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4377),
                            LoanStatusId = 3,
                            Name = "Loan Rejected",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4378)
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4380),
                            LoanStatusId = 8,
                            Name = "Loan Repaid",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4381)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Applicationn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ExcelFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FinancingPurposeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequestedTenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyProfileId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("FiscalCode", "UserId")
                        .IsUnique();

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("finnhubIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("marketCapitalization")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("shareOutstanding")
                        .HasColumnType("float");

                    b.Property<string>("ticker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("weburl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company_Type = "Sole proprietorship (S.I.)",
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 467, DateTimeKind.Local).AddTicks(8541)
                        },
                        new
                        {
                            Id = 2,
                            Company_Type = "Other",
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 467, DateTimeKind.Local).AddTicks(8594)
                        },
                        new
                        {
                            Id = 3,
                            Company_Type = "Partnership limited by shares (p.l.sh.)",
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 467, DateTimeKind.Local).AddTicks(8596)
                        },
                        new
                        {
                            Id = 4,
                            Company_Type = "Limited partnership (l.p.)",
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 467, DateTimeKind.Local).AddTicks(8598)
                        },
                        new
                        {
                            Id = 5,
                            Company_Type = "Cooperative Society (c.s.)",
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 467, DateTimeKind.Local).AddTicks(8600)
                        },
                        new
                        {
                            Id = 6,
                            Company_Type = "General partnership (g.p.)",
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 467, DateTimeKind.Local).AddTicks(8602)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lenders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4415),
                            DateUpdated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4417),
                            Name = "PMI BTECH"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4419),
                            DateUpdated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4420),
                            Name = "AZIF"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4422),
                            DateUpdated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4423),
                            Name = "LOGITECH"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LenderCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LenderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinRequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TenorMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TenorMin")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("LenderId");

                    b.ToTable("LenderConditions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyTypeId = 5,
                            LenderId = 1,
                            MinRequestedAmount = 100000m,
                            TenorMin = 30m
                        },
                        new
                        {
                            Id = 2,
                            LenderId = 2,
                            MinRequestedAmount = 400000m,
                            TenorMax = 60m,
                            TenorMin = 40m
                        },
                        new
                        {
                            Id = 3,
                            CompanyTypeId = 1,
                            LenderId = 3,
                            MinRequestedAmount = 100000m,
                            TenorMax = 60m,
                            TenorMin = 30m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<int>("LenderId")
                        .HasColumnType("int");

                    b.Property<int>("LoanStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LenderId");

                    b.HasIndex("LoanStatusId");

                    b.HasIndex("ProductId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Domain.Entities.LoanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoanStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4219),
                            Name = "Created",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4284)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4286),
                            Name = "Accepted",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4288)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4289),
                            Name = "Rejected",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4291)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4293),
                            Name = "Disbursed",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4294)
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4296),
                            Name = "Current",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4298)
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4300),
                            Name = "In Arrears",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4301)
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4303),
                            Name = "Defaulted",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4304)
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4306),
                            Name = "Repaid",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4308)
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4310),
                            Name = "Guaranteed",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4311)
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4313),
                            Name = "Erased",
                            Updated = new DateTime(2023, 8, 25, 11, 48, 34, 468, DateTimeKind.Local).AddTicks(4314)
                        });
                });

            modelBuilder.Entity("Domain.Entities.MatrixTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LenderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Spread")
                        .HasColumnType("float");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LenderId");

                    b.HasIndex("ProductId");

                    b.ToTable("MatrixTemplates");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.Prefix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("Country_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Country_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prefix");

                    b.HasKey("Id");

                    b.ToTable("Prefixes");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Max_Financed_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Min_Financed_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Refernce_rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Installments with pre-amortization at a fixed rate",
                            Max_Financed_Amount = 200000000m,
                            Min_Financed_Amount = 1000000m,
                            Name = "Installments with pre-amortization at a fixed rate",
                            Refernce_rate = 0.0025000000000000001
                        },
                        new
                        {
                            Id = 2,
                            Description = "Installment with variable rate pre-amortization",
                            Max_Financed_Amount = 100000000m,
                            Min_Financed_Amount = 1000000m,
                            Name = "Installment with variable rate pre-amortization",
                            Refernce_rate = 0.029999999999999999
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccesToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccesTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BlockEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordRecoveyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordRecoveyTokenCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PrefixId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PrefixId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4377AA5F-C7E7-45B9-A879-8409074EE9AB",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ACEE1889-E154-4C90-91D4-5F8F396FC5B5",
                            Name = "Loan Officer",
                            NormalizedName = "LOAN OFFICER"
                        },
                        new
                        {
                            Id = "0A47E499-1E79-4E81-94DE-1BC68019CCCE",
                            Name = "Borrower",
                            NormalizedName = "BORROWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "03DEC9A5-1AC0-4757-8393-BB870D4D53B0",
                            RoleId = "ACEE1889-E154-4C90-91D4-5F8F396FC5B5"
                        },
                        new
                        {
                            UserId = "392086A6-ABEB-48E1-8666-426BA7B31312",
                            RoleId = "4377AA5F-C7E7-45B9-A879-8409074EE9AB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.HasOne("Domain.Entities.LoanStatus", "LoanStatus")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.ApplicationStatus", "LoanStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LoanStatus");
                });

            modelBuilder.Entity("Domain.Entities.Applicationn", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithMany("Applications")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Borrower");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.HasOne("Domain.Entities.CompanyProfile", "CompanyProfile")
                        .WithMany()
                        .HasForeignKey("CompanyProfileId");

                    b.HasOne("Domain.Entities.CompanyType", "CompanyType")
                        .WithMany("Borrowers")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Borrowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProfile");

                    b.Navigation("CompanyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.LenderCondition", b =>
                {
                    b.HasOne("Domain.Entities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId");

                    b.HasOne("Domain.Entities.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("Lender");
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.HasOne("Domain.Entities.Applicationn", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LoanStatus", "LoanStatus")
                        .WithMany()
                        .HasForeignKey("LoanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Lender");

                    b.Navigation("LoanStatus");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.MatrixTemplate", b =>
                {
                    b.HasOne("Domain.Entities.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lender");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Prefix", "Prefix")
                        .WithMany()
                        .HasForeignKey("PrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prefix");
                });

            modelBuilder.Entity("Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Navigation("Borrowers");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Borrowers");
                });
#pragma warning restore 612, 618
        }
    }
}
